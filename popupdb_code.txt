import os,re,random,threading,subprocess
import requests, asyncio, hashlib, socket
from discord.ext import commands
import requests, math
import time
import json
from func_timeout import func_timeout, FunctionTimedOut
from tensorflow.keras.models import load_model
from PIL import Image, ImageOps
import numpy as np
from urllib.parse import unquote
from discord.ext import tasks
oxxx=""
tokens=[]
xxx=""
def urlparse(url):
  url = unquote(url)
  nms=numhunt(url)
  if len(nms)>0:
    return nms[0]
  else:
    return "No number found"
def numhunt(data):
  nums= list(dict.fromkeys(re.findall(r"[\+\(]?\d{1,4}[\s-]\d{1,4}\)?[\s-]?\d{2,4}[\s-]?\d{4,6}",data)+re.findall(r"[\+\(]?\d{0,4}[\s-]?\d{1,4}\)?[\s-]?\d{2,4}[\s-]?\d{4,6}",data)+re.findall(r"[\+\(]?\d{0,4}[\s-]?\d{1,4}\)?[\s-]?\d{2,4}[\s-]?\d{4,6}",data)+re.findall(r"\d{0,4}[\s]\d{1,4}[\s]\d{2,4}[\s]\d{4,6}",data)))
  fnum=""
  for x in range(0,len(nums)):
    tnum="-".join("-".join("-".join(nums[x].split("+")).split("(")).split(")"))
    if len(tnum.split("-"))>len(fnum.split("-")):
      fnum=nums[x]
  if fnum!="":
    return [fnum]
  else:
    return []
def getip(site):
  try:
    ip=socket.gethostbyname(site.split("//")[1].split("/")[0])
  except:
    return "DNS lookup failed"
  try:
    req=requests.get("https://api.iplocation.net/?ip="+ip,timeout=10)
  except:
    return "IP api failed"
  js=json.loads(req.text)
  base=".".join(site.split("//")[1].split("/")[0].split(".")[-2:])
  email=subprocess.getoutput("whois "+base)
  email=email.split("Registrar Abuse Contact Email:")
  if len(email)<2:
    return "Country:"+js["country_name"]+"\nISP:"+js["isp"]
  email=email[1]
  email=email.split("\n")[0]
  return "Country:"+js["country_name"]+"\nISP:"+js["isp"]+"\nEmail:"+email
def ispopup(filepath):
    data = np.ndarray(shape=(1, 224, 224,3), dtype=np.float32)
    image = Image.open(filepath).convert('RGB')
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.ANTIALIAS)
    image_array = np.asarray(image)
    normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
    data[0] = normalized_image_array
    prediction = model.predict(data)
    prediction=list(prediction[0])
    if prediction[0]>prediction[1]:
      return "Popup (Confidence- "+str(prediction[0]*100)+"%)"
    else:
      return "Not popup (Confidence- "+str(prediction[1]*100)+"%)"
model = load_model('keras_model.h5')
def h(i):
  global tokens
  for y in i:
    proxyDict = {
                  "http"  : 'socks4://'+y,
                  "https" : 'socks4://'+y
                }
    try:
      x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=5, allow_redirects=True)
    except:
      continue
    else:
      #print(y)
      #print("http found")
      if not ([y,1] in tokens):
        tokens.append([y,1])
def h5(i):
  global tokens
  for y in i:
    proxyDict = {
                  "http"  : 'socks5://'+y,
                  "https" : 'socks5://'+y
                }
    #x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=10, allow_redirects=True)
    try:
      x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=10, allow_redirects=True)
    except:
      continue
    else:
      #print(y)
      #print("http found")
      if not ([y,2] in tokens):
        tokens.append([y,2])
#def getproxs():
  #CODE REMOVED DUE TO HIGH ABUSE POTENTIAL
#def getproxs5():
  #CODE REMOVED DUE TO HIGH ABUSE POTENTIAL

def writehtm(url,ss,num,key):
  f=open("files/"+key+".html","w")
  f.write("Details:<br>Url:"+url+"<br>Phone number:"+num+"<br><br>Screenshot:<img src=\""+ss+"\">")
  f.close()
@tasks.loop(seconds=1)
async def post():
  global xxx, oxxx

  if oxxx!=xxx:
    for server in bot.guilds:
      for channel in server.channels:
        if str(channel.type) == 'text':
          if str(channel)=="posts":
            await channel.send(xxx)
            oxxx=xxx
            print(oxxx)


def ocrhunt():
  global xxx
  while True:
    while True:
      try:
        r=requests.get("https://urlscan.io/json/live/",timeout=20)
      except:
        continue
      else:
        break
    j=json.loads(r.text)
    j=j["results"]
    for st in j:
      site=st["task"]["url"]
      f=open("files/data.txt","r")
      dts=f.read()
      dts=dts.split("\n")
      f.close()
      ct=False
      for x in dts:
        if len(x.split(";;"))<2:
          continue
        if site==x.split(";;")[0]:
          print("This popup has already been found. Link: "+x.split(";;")[2])
          ct=True
      if ct:
        continue
      res=st["result"]
      res=res.split("/")[-2]
      resr="https://urlscan.io/dom/"+res
      #print(res)
      while True:
        try:
          r2 = requests.get(resr)
        except:
         continue
        else:
         break

      num=numhunt(r2.text)
      if len(num)>0:
        num=num[0]
      else:
        num=0
      resr="https://urlscan.io/result/"+res
      #print(res)
      while True:
        try:
          r2 = requests.get(resr)
        except:
         continue
        else:
         break
      if len(r2.text.split("Malicious Activity!"))<2:
        continue
      if len(r2.text.split("Tech Support Scam"))<2:
        continue
      key=str(random.randint(10000000,99999999))
      print(st["task"]["url"])

      try:
        r = requests.get(site, timeout=10)
      except:
        print("Site is offline")

      #nums=numhunt(r.text)
      ff=open("files/code/"+key+".html","w")
      ff.write(r.text)
      ff.close()

      r = requests.get(st["screenshot"], allow_redirects=True)
      open("files/imgs/"+key+".png", 'wb').write(r.content)
      cnt=0

      if num==0:
        url = "https://freeocrapi.com/api"
        filename = "files/imgs/"+key+".png"
        data = {'file': open(filename, 'rb')}
        response = requests.request("POST", url, files=data)
        print(response.text)
        nums=numhunt(response.text)
        if len(nums)==0:
          print("OCR search: No number found")
          os.remove("files/imgs/"+key+".png")
          os.remove("files/code/"+key+".html")
        else:
          num=nums[0]
      cd=site+";;"+num+";;"+"http://johnsmithers.tk/files/"+key+".html"
      f=open("files/data.txt","a")
      f.write(cd+"\n")
      f.close()

      writehtm(st["task"]["url"],"/files/imgs/"+key+".png",num,key)
      f=open("files/live.txt","a")
      f.write("\n"+st["task"]["url"]+";;/files/"+key+".html"+";;/files/imgs/"+key+".png")
      f.close()
      final="New popup found! Link: http://johnsmithers.tk/files/"+key+".html"
      xxx=final
    time.sleep(10)

TOKEN = ""
bot = commands.Bot(command_prefix='!')
began=False
@bot.event
async def on_ready():
  global began
  print(f'{bot.user.name} has connected to Discord!')
  if not began:
    post.start()
    editor.start()
  began=True
def shot(site,key):
  #os.system('chromium-browser --headless '+site+' --screenshot=files/imgs/'+key+'.jpg --virtual-time-budget=20000 --window-size=1920,1080 --disable-gpu')
  print("starter")
  #os.system('chromium-browser --headless '+site+' --screenshot=files/imgs/'+key+'.jpg --virtual-time-budget=20000 --window-size=1920,1080 --disable-gpu')
  try:
    return_value = func_timeout(45,os.system, args=('chromium-browser --headless '+site+' --screenshot=files/imgs/'+key+'.jpg --virtual-time-budget=20000 --window-size=1920,1080 --disable-gpu',) )
  except:
    os.system("killall chromium-browser")
    return True
  return not os.path.exists('files/imgs/'+key+'.jpg')

hshmutx = threading.Lock()
def getter(x):
  global y, sc, hashes
  try:
    r=requests.get(x,timeout=10)
  except:
    return
  hsh=hashlib.sha256(r.content).hexdigest()
  print(hsh)
  if hsh in hashes:
    print("found")
    sc+=1
  else:
    y.append(hsh)
def hashhunt(lnk):
  global y, sc, hashes, hshmutx

  hshmutx.acquire()
  try:
    f=open("hashes.txt","r")
    hashes=f.read()
    hashes=hashes.split("\n")
    f.close()
    r=requests.get(lnk)
    r=r.text
    src=re.findall("src\\=[\\\"\\\'].{1,100}[\\\"\\\']",r)
    for x in range(0,len(src)):
      if len(src[x].split("\""))>2:
        src[x]=src[x].split("\"")[1]
      else:
        src[x]=src[x].split("'")[1]
    lnk="".join(lnk.split("#"))
    lnk=lnk.split("/")
    for x in range(0,len(lnk)):
      lnk[x]=lnk[x].split("?")[0]
    lnk="/".join(lnk)
    if lnk[-5:]==".html" or lnk[-4:]==".htm":
      lnk=lnk.split("/")
      lnk.pop()
      lnk="/".join(lnk)

    while True:
      if len(lnk.split("//"))<2:
        break
      lnk="/".join(lnk.split("//"))
    lnk="://".join(lnk.split(":/"))
    if lnk[-1]!="/":
      lnk+="/"
    print(lnk)
    localu=[]
    for x in range(0,len(src)):
      if src[x][0:4]!="http":
        if src[-4:]!=".css" and src[-3:]!=".js":
          localu.append(lnk+src[x])
    localu=list(dict.fromkeys(localu))
    print(localu)
    sc=0
    y=[]
    thds=[]
    for x in localu:
      thds.append(threading.Thread(target=getter, args=(x,)))
      thds[-1].start()
    for x in range(0,len(thds)):
      thds[x].join()
    if sc>0:
      ff=open("hashes.txt","a")
      for x in y:
        ff.write("\n"+x)
      ff.close()
  except:
    hshmutx.release()
    return 0
  else:
    hshmutx.release()
    return sc
mutx=False
mssg=[]
txxt=[]
def sender(text,message):
  global mutx, mssg, txxt
  mssg.append(message)
  txxt.append(text)
  mutx=True
@tasks.loop(seconds=1)
async def editor():
  global mssg, mutx, txxt
  if mutx:
    mutx=False
    for x in range(0,len(mssg)):
      await mssg[0].edit(content=txxt[0])
      mssg.pop(0)
      txxt.pop(0)
def ais(key,fid):
  global final
  final[fid]+="\n"+ispopup(key)
def hsh(site,message):
  hashes=hashhunt(site)
  if hashes<3:
    sender("We did not detect a popup",message)
  else:
    thdd=threading.Thread(target=getpopup,args=(site,message,"\nHash count: "+str(hashes),))
    thdd.start()
final=[]
def proxget(site):
  tokclone=tokens
  while True:
    try:
      while True:
        if tokclone[0][1]==1:
          proxyDict = {
                        "http"  : 'socks4://'+tokclone[0][0],
                        "https" : 'socks4://'+tokclone[0][0]
                      }
        elif tokclone[0][1]==2:
          proxyDict = {
                        "http"  : 'socks5://'+tokclone[0][0],
                        "https" : 'socks5://'+tokclone[0][0]
                      }
        try:
          x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=5, allow_redirects=True)
        except:
          
          if len(tokclone)<3:
            time.sleep(3)
            tokclone=tokens
          else:
            tokclone.pop(0)
          continue
        else:
          break
      r=requests.get(site, timeout=20, proxies=proxyDict, allow_redirects=True)
    except:
      try:
        x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=5, allow_redirects=True)
      except:
        
        while True:
          if len(tokclone)<3:
            time.sleep(3)
            tokclone=tokens
          else:
            tokclone.pop(0)
            break
      else:
        try:
          print("Proxies failed. Attempting local requests...")
          r=requests.get(site, timeout=20, allow_redirects=True)
        except:
          print("Site is offline")
          return -1
        else:
          return r
          
    else:
      return r
def watcher():
  while True:
    f=open("files/live.txt","r")
    r=f.read()
    f.close()
    r=r.split("\n")
    ln=len(r)
    for x in r:
      if x!="":
        try:
          socket.gethostbyname(x.split(";;")[0].split("//")[1].split("/")[0])
        except:
          r.remove(x)
          continue
        req=proxget(x.split(";;")[0])
        if req==-1:
          r.remove(x)
          continue
        if req.status_code>399:
          r.remove(x)
          continue
    if len(r)<ln:
      r="\n".join(r)
      f=open("files/live.txt","w")
      f.write(r)
      f.close()
    time.sleep(random.randint(30,60))
def getpopup(site,message,opening):
  tokclone=tokens
  if len(site.split("//"))==1:
    site="http://"+site
  try:
    socket.gethostbyname(site.split("//")[1].split("/")[0])
  except:
    sender("Site is offline",message)
    return
  global xxx, final
  fid=len(final)
  cd=site+";;"
  ss=False
  f=open("files/data.txt","r")
  dts=f.read()
  dts=dts.split("\n")
  f.close()
  for x in dts:
    if len(x.split(";;"))<2:
      continue
    if site==x.split(";;")[0]:
      sender("This popup has already been found. Link: "+x.split(";;")[-1],message)
      return
  key=str(random.randint(10000000,99999999))
  final.append(opening)
  fnm=0
  html=0
  final[fid]+='\nURL parser:'
  url = unquote(site)
  nms=numhunt(url)
  if len(nms)>0:
    final[fid]+=nms[0]
    fnm=nms[0]
    html+=1
  else:
    final[fid]+="No number found"
  while True:
    if len(tokclone)<3:
      sender("Waiting on proxies...",message)
      time.sleep(3)
    else:
      break
  sender("Fetching webpage...",message)
  while True:
    try:
      while True:
        if tokclone[0][1]==1:
          proxyDict = {
                        "http"  : 'socks4://'+tokclone[0][0],
                        "https" : 'socks4://'+tokclone[0][0]
                      }
        elif tokclone[0][1]==2:
          proxyDict = {
                        "http"  : 'socks5://'+tokclone[0][0],
                        "https" : 'socks5://'+tokclone[0][0]
                      }
        try:
          x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=5, allow_redirects=True)
        except:
          tokclone.pop(0)
          if len(tokclone)<3:
            time.sleep(3)
          continue
        else:
          break
      r=requests.get(site, timeout=20, proxies=proxyDict, allow_redirects=True)
      r=r.text
    except:
      try:
        x=requests.get("https://api.ipify.org",proxies=proxyDict, timeout=5, allow_redirects=True)
      except:
        tokclone.pop(0)
        while True:
          if len(tokclone)<3:
            time.sleep(3)
          else:
            break
      else:
        try:
          sender("Proxies failed. Attempting local requests...",message)
          r=requests.get(site, timeout=20, allow_redirects=True)
          r=r.text
        except:
          sender("Site is offline",message)
          return
        else:
          break
    else:
      break
  htnums=numhunt(r)


  if len(htnums)==0:
    final[fid]+= "\nPlain HTML search: No number found"
  else:
    print(htnums[0])
    final[fid]+="\nPlain HTML search: "
    final[fid]+=htnums[0]
    html+=1
    fnm=htnums[0]
    ss=True
    for x in dts:
      if len(x.split(";;"))<2:
        continue
      if htnums[0]==x.split(";;")[1]:
        sender("This popup has already been found. Link: "+x.split(";;")[2],message)
        return

  ff=open("files/code/"+key+".html","w")
  ff.write(r)
  ff.close()
  sender("Taking screenshot...",message)
  stubs=["requestPointerLock()","autoplay"]
  pts=0
  for x in stubs:
    if len(r.split(x))>1:
      pts+=len(r.split(x))-1
  print(pts)
  final[fid]+="\nScam points:"
  final[fid]+=str(pts)
  print(key)
  nums=""
  filename = "files/imgs/"+key+".jpg"
  if shot(site,key):
    print("Local shot error")
    sender("Local shot failed. Attempting cloud screenshot...",message)
    headers = {'API-Key':'','Content-Type':'application/json'}
    data = {"url": site, "visibility": "public"}
    response = requests.post('https://urlscan.io/api/v1/scan/',headers=headers, data=json.dumps(data))
    print(response)
    uuid=response.json()["uuid"]
    print(uuid)
    while True:
      resp=requests.get("https://urlscan.io/screenshots/"+uuid+".png")
      if resp.status_code==404:
        continue
      break
    open("files/imgs/"+key+".png", 'wb').write(resp.content)
    filename = "files/imgs/"+key+".png"
  thd2=threading.Thread(target=ais,args=(filename,fid,))
  thd2.start()
  if html<2:
    url = "https://freeocrapi.com/api"

    sender("Performing OCR scan...",message)
    data = {'file': open(filename, 'rb')}
    response = requests.request("POST", url, files=data)
    print(response.text)
    print(nums)
    nums=numhunt(json.loads(response.text)["text"])
    response = requests.request("POST", url, files=data)
    nums2=numhunt(json.loads(response.text)["text"])
    print(nums2)
    nums=nums+nums2
    if len(nums)==0 and len(nums2)!=0:
      nums=nums2
    if len(nums)!=0:
      fnm=nums[0]
      final[fid]+="\nOCR search: "
      final[fid]+=nums[0]
      print(nums[0])
      cnt=0
      if len(htnums)>0:
        tnum="-".join("-".join("-".join(htnums[0].split("+")).split("(")).split(")"))
        ftnum="-".join("-".join("-".join(fnm.split("+")).split("(")).split(")"))
        if len(tnum.split("-"))>len(ftnum.split("-")):
          fnm=htnums[0]
      
      ss=True
      for x in dts:
        if len(x.split(";;"))<3:
          continue
        if nums[0]==x.split(";;")[1]:
          os.remove(filename)
          os.remove("files/code/"+key+".html")
          sender("This popup has already been found. Link: "+x.split(";;")[2],message)
          return
    else:
      final[fid]+="\nOCR search failed"
  else:
    ss=True
  #open("files/imgs/"+key+".jpg", 'wb').write(r)
  #thdhsh.join()
  thd2.join()

  cd=cd+str(fnm)+";;"
  cd=cd+"http://johnsmithers.tk/files/"+key+".html"
  if ss:
    f=open("files/data.txt","a")
    f.write(cd+"\n")
    f.close()
    writehtm(site,"/"+filename,fnm,key)
    final[fid]=final[fid]+"\n"+getip(site)
    final[fid]=final[fid]+"\n"+"http://johnsmithers.tk/files/"+key+".html"
    xxx=final[fid]
    f=open("files/live.txt","a")
    f.write("\n"+site+";;/files/"+key+".html"+";;/"+filename)
    f.close()
  sender(final[fid],message)
  final[fid]=""
  jjj=True
  for x in range(fid,len(final)):
    if final[x]!="":
      jjj=False
  if jjj:
    while True:
      try:
        final.pop(fid)
      except:
        break

  return
@bot.command(name='add')
async def add(ctx,*sites):
  global ct
  for site in sites:
    message=await ctx.send("Loading...")


    thdhsh=threading.Thread(target=hsh,args=(site,message,))
    thdhsh.start()

thd=threading.Thread(target=ocrhunt)
thd.start()
thd=threading.Thread(target=watcher)
thd.start()
while True:
  try:
    bot.run(TOKEN)
  except:
    pass
